#+TITLE:   evil-tex
#+DATE:    February 1, 2020
#+STARTUP: inlineimages nofold

LaTeX integration for =evil-mode=. Provides text objects that work well with
=evil-surround=, LaTeX oriented section movement, prompts for quickly
entering environments or [[https://github.com/cdominik/cdlatex][cdlatex]] like accents, and useful toggles.

Heavily insipred by [[https://github.com/lervag/vimtex][vimtex]]. Successor of [[https://github.com/hpdeifel/evil-latex-textobjects][evil-latex-textobjects]].

* Table of Contents :TOC_3:noexport:
- [[#incomplete-showcase][Incomplete Showcase]]
- [[#installation][Installation]]
- [[#overview][Overview]]
  - [[#text-objects][Text Objects]]
  - [[#toggling][Toggling]]
  - [[#misc][Misc.]]
  - [[#interaction-with-other-packages][Interaction with other packages]]
- [[#configuration][Configuration]]
  - [[#binding-new-envsaccents-to-the-keymaps][Binding new envs/accents to the keymaps]]
  - [[#options-to-enable-and-disable][Options to enable and disable]]
- [[#acknowledgements][Acknowledgements]]
- [[#appendix][Appendix]]
  - [[#environment-keymap][Environment keymap]]
  - [[#cdlatex-accent-keymap][cdlatex accent keymap]]
  - [[#delimiter-keymap][Delimiter keymap]]

* Incomplete Showcase
=|= marks point.

=\ti|lde{h}= \to cic /(change inner command)/ \to =\tilde{|}=

=\tilde{h|}= \to cscc bar SPC /(change surrounding command to =bar=)/ \to =\bar{h}=

=\dv|{}= \to cscc pdv SPC /(change surrounding command to =pdv=)/ \to =\pdv{}=

=\eps|ilon= \to cscc mu SPC /(change surrounding command to =mu=)/ \to =\mu=

=\(\sum_{i=1}^{n} i^2|\)= \to cim /(change inner math)/ \to =\(|\)=

=\(\sum_{i=1}^{n} i^2|\)= \to mtm /(toggle surrounding math)/ \to =\[\sum_{i=1}^{n} i^2|\]=

=\[a|^2\]= \to csmeA /(change surrounding math to environment =align*=)/ \to
=\begin{align*}\n a^2 \n\end{align}=

=(\mu|_\nu)= \to csddP /(change surrounding delimiter to =\left(=)/ \to =\left(\mu|_\nu\right)=
* Installation
Until this package's on MELPA, clone it and put it in your load path and hook it
to ~LaTeX-mode-hook~. Sorry ¯\_(ツ)_/¯

This package requires =evil=, =cl-lib=, and =auctex=.
* Overview
** Text Objects
This package defines an increasing number of text objects:
| Key | Abbreviation    | Text Object Target                                                       | Surround behavior                          |
|-----+-----------------+--------------------------------------------------------------------------+--------------------------------------------|
| ~c~ | command         | TeX marcos: ~\foo{...}~                                                  | Prompts you for a macro                    |
| ~e~ | environment     | ~\begin{...}~ ~\end{...}~ blocks                                         | Prompts you with [[#environment-keymap][the env keymap]]            |
| ~m~ | math            | Both inline ~\( \)~ and display ~\[ \]~.                                 | Surrounds with ~\( \)~                     |
| ~M~ | Display math    | N/A                                                                      | Surrounds with ~\[ \]~                     |
| ~$~ | dollar          | Old TeX inline maths. [[https://tex.stackexchange.com/questions/510/are-and-preferable-to-dollar-signs-for-math-mode][Though you should probably use \(\)]].               |                                            |
| ~d~ | delimiters      | Math delimiters, ~(foo), \left(foo\right), [foo], \left[foo\right]~ etc. | Prompts you with [[#delimiter-keymap][the delim keymap]]          |
| ~S~ | sections        | LaTeX parts, chapters, (sub)sections, and (sub)paragraphs                |                                            |
| ~;~ | [[#cdlatex-accent-keymap][CDLaTeX accents]] | N/A                                                                      | Prompts you with [[#cdlatex-accent-keymap][the cdlatex accent keymap]] |
| ~^~ | superscript     | ~x^a~ ~x^\alpha~ ~x^{...}~                                               | Surrounds with ~^{ }~                      |
| ~_~ | subscript       | ~x_a~ ~x_\alpha~ ~x_{...}~                                               | Surrounds with ~_{ }~                      |
| ~T~ | table cell      | LaTeX table/align cells, e.g. ~&foo&~.                                   | Surrounds with ~& &~                       |

The full text object definitions are as follows:

#+BEGIN_SRC LaTeX
    \foobar{barbaz}     \foobar{barbaz}    \foobar     \foobar    \foobar{}     \foobar{}
    └─────────────┘             └────┘    └──────┘            ┆   └───────┘             ┆
           ac                     ic         ac      ic (empty)      ac            ic (empty)

   ┌\begin{foobar}     \begin{foobar}
   │                  ┌
 ae│ baz            ie│ baz
   │                  └
   └\end{foobar}       \end{foobar}

   \(foobar\)    \(foobar\)
   └────────┘      └────┘
       am            im

   (foobar)    (foobar)    \left(foobar\right)    \left(foobar\right)
   └──────┘     └────┘     └─────────────────┘          └────┘
      ad          id               ad                     id

    ┌\section{foo}          \section{foo}
    │                      ┌
  aS│ baz                iS│ baz
    │\subsection*{}        │\subsection*{}
    └ qux                  └ qux
     \chapter*{bar}        \chapter*{bar}

    a^{foo}    a^{foo}    a^b    a^b    a^\bar    a^\bar
     └────┘       └─┘      └╵      ╵     └───┘      └──┘ 
       a^          i^      a^      i^     a^         i^
       
    & foobar &    & foobar &    & foobar \\    & foobar \\    
    └────────┘     └──────┘     └─────────┘     └──────┘  
        aT            iT            aT            iT
#+END_SRC LaTeX
The above rendering might bug out on mobile.

Note that the section objects extends up to the next ~\section{}~ type command of
equal or higher rank to the one closest to the point from above, and does not
distinguish between named and unnamed sections.
** Toggling
There are a few operations one might want to do frequently, but not want to
press many keys for. To this end we provide a few toggles, bound by default to
=mt*= (for /"magnificent toggle"/), as you have 25 other marks to choose from.

For vimtex users, or people who don't like the letter =s=, we also provide the
ability to map the toggles to =ts*= instead, e.g. instead of =mtd= toggling
delimiters, =tsd= will. See [[#configuration][configuration]]. the provided toggles are:

| Key | Abbreviation | Behaviour                                                                                 |
|-----+--------------+-------------------------------------------------------------------------------------------|
| mtc | command      | toggle asterisk on command, e.g. ~\foo~ \Leftrightarrow ~\foo*~                           |
| mtd | delimiter    | toggle between delimiter autosizing, e.g.  ~(foo)~ \Leftrightarrow ~\Left(foo\right)~     |
| mte | environment  | toggle enviornment asterisk e.g. ~\begin{equation}~ \Leftrightarrow ~\begin{equation*}~   |
| mtm | math         | toggle between inline and display math, i.e. ~\(foo\)~ \Leftrightarrow ~\[foo\]~          |
| mtS | section      | "toggle" section name, by entering a new one from the minibuffer. =M-n= for original name |
** Misc.
The binding =M-n= is provided for =cd-latex= =TAB=-like brace movement:
(=|= marks point)

=\bar{h|}=     -> =M-n= -> =\bar{h}|=
=\frac{a|}{}=  -> =M-n= -> =\frac{a}{|}=
=\frac{a|}{b}= -> =M-n= -> =\frac{a}{b|}=
=\frac{a}{b|}= -> =M-n= -> =\frac{a}{b}|=
** Interaction with other packages
=evil-tex= does not require, but supports =evil-surround=. Many of the text objects
are defined by functions more complex than regexps, so if you have =evil-embrace=
installed as well, it will still use =evil-surround= for surround bindings.

=evil-tex= also supports =which-key=, and if you are using =ts*= style toggles, it
plays nicely with =evil-snipe= if installed
* Configuration
** Binding new envs/accents to the keymaps
Should be done by setting ~evil-tex-user-env-map-generator-alist~ or
~evil-tex-user-cdlatex-accents-map-generator-alist~. For example, to add default
position for figures:
#+BEGIN_SRC emacs-lisp
(setq evil-tex-user-env-map-generator-alist
      '(("f" "\\begin{figure}[!ht]\n" . "\n\\end{figure}")))
#+END_SRC
To add your own accent to ~evil-tex-user-cdlatex-accents-map-generator-alist~:
#+BEGIN_SRC emacs-lisp
(setq evil-tex-user-cdlatex-accents-map-generator-alist
      '(("b" . "mathbb")))
#+END_SRC
Same for ~evil-tex-user-delim-map-generator-alist~. The exact format
is documented under the variable ~evil-tex-user-env-map-generator-alist~
** Options to enable and disable
 - By default, the newline proceeding ~\begin{...}~ and preceding ~\end{...}~ is
  selected as part of the delimiter. This way, when doing =cie= you're placed on a
  separate line, and surrounding with envs would force separate lines for ~\begin~,
  inner text, and ~\end~.

  If you don't want the ~\begin{...}~ newline behaviour discribed above, set
   ~evil-tex-select-newlines-with-envs~ to ~nil~.
- The toggle bindings are set by default to =mt*=. To turn this off and regain the
  invaluable =t= mark, set ~evil-tex-toggle-override-m~ to ~nil~.
- In order to map the toggle bindings to =ts*=, set ~evil-tex-toggle-override-t~ to
  ~t~. This will overide the standard =t= motion, and will rob you of the ability to
  move to one character before =s= (unless you are willing to do =fsh=).

*Make sure to set these variables before evil-TeX is loaded!*

* Acknowledgements

We would like to thank [[https://github.com/lervag][@lervag]] for writing the excellent [[https://github.com/lervag/vimtex][vimtex]] vim plugin,
which was the main thing we missed about vim. We would also like to thank
[[https://github.com/hpdeifel/][@hpdeifel]] for writing [[https://github.com/hpdeifel/evil-latex-textobjects][evil-latex-textobjects]], which laid the groundwork for this
package. Lastly, we would like to thank [[i][@hlissner]] helping us with a particulary
tricky bit of elisp, and also writing [[https://github.com/hlissner/doom-emacs][Doom Emacs]] without which this plugin would
probably not exist.

* Appendix
** Environment keymap
Giving a prefix argument would prompt for options.
| Category                  | env         | key alias |
|---------------------------+-------------+-----------|
| Generic                   | prompt user | x         |
|---------------------------+-------------+-----------|
| Built In                  | equation    | e         |
|                           | equation*   | E         |
|                           | figure      | f         |
|                           | itemize     | i         |
| Beamer                    | frame       | b         |
|                           | enumerate   | I         |
| AmsMath                   | align       | a         |
|                           | align*      | A         |
|                           | alignat     | n         |
|                           | alignat*    | N         |
|                           | eqnarray    | r         |
|                           | flalign     | l         |
|                           | flalign*    | L         |
|                           | gather      | g         |
|                           | gather*     | G         |
|                           | multline    | m         |
|                           | multline*   | M         |
|                           | cases       | c         |
| Common Theorems, prefix t | axiom       | ta        |
|                           | corollary   | tc        |
|                           | definition  | td        |
|                           | examples    | te        |
|                           | exercise    | ts        |
|                           | lemma       | tl        |
|                           | proof       | tp        |
|                           | question    | tq        |
|                           | remark      | tr        |
|                           | theorem     | tt        |
** cdlatex accent keymap
See [[https://github.com/cdominik/cdlatex/blob/a5cb624ef/cdlatex.el#L141][cdlatex]]. "style?" implies that the braces come before the macro, e.g
={\displaystyle ...}=
| key | macro             | style? |
|-----+-------------------+--------|
| .   | dot               |        |
| :   | ddot              |        |
| ~   | tilde             |        |
| N   | widetilde         |        |
| ^   | hat               |        |
| H   | widehat           |        |
| -   | bar               |        |
| T   | overline          |        |
| _   | underline         |        |
| {   | overbrace         |        |
| }   | underbrace        |        |
| >   | vec               |        |
| /   | grave             |        |
| \   | acute             |        |
| v   | check             |        |
| u   | breve             |        |
| m   | mbox              |        |
| c   | mathcal           |        |
| r   | mathrm/textrm     |        |
| i   | mathit/textit     |        |
| l   | NONE!!/textsl     |        |
| b   | mathbf/textbf     |        |
| e   | mathem/emph       |        |
| y   | mathtt/texttt     |        |
| f   | mathsf/textsf     |        |
| 0   | textstyle         |        |
| 1   | displaystyle      | yes    |
| 2   | scriptstyle       | yes    |
| 3   | scriptscriptstyle | yes    |
** Delimiter keymap
| key | delimiter                        |
|-----+----------------------------------|
| b   | ~[foo]~                          |
| B   | ~\left[foo\right]~               |
| c   | ~\{foo\}~                        |
| C   | ~\left\{foo\right\}~             |
| r   | ~\langle foo\rangle~             |
| R   | ~\left\langle foo \right\langle~ |
| p   | ~(foo)~                          |
| P   | ~\left(foo\right)~               |

